//requries addnumbers, measure, background-image, after
$grid-col: #000000;
$_bi_d: "a" !default;
@mixin construction-grid($a1:$_bi_d, $a2:$_bi_d,$a3:$_bi_d,$a4:$_bi_d,$a5:$_bi_d,$a6:$_bi_d,$a7:$_bi_d,$a8:$_bi_d,$a9:$_bi_d) {
    $args: arguments($a1,$a2,$a3,$a4,$a5,$a6,$a7,$a8,$a9);
    @if not(has-lists($args)) and length($args) < 4 {
        $n: ();
        $n: append($n, $args);
        $args: $n; }
    $grids: ();
    $grids: list-change-separator($grids, ',');
    $sizes: ();
    $sizes: list-change-separator($sizes, ',');

    @for $i from 1 through length($args) {
        $x: false;
        $y: false;
        $col: #000;
        $on: nth($args, $i);
        @if type-of($on) == 'list' {
            $on: ($on); }
        @for $n from 1 through length($on) {
            $onn: nth($on, $n);
            $onn: if($onn == 0, 0px, $onn);
            @if is-length($onn) and strip-units($onn) >= 0 {
                @if $x == false {
                    $x: $onn;
                } @else {
                    $y: $onn;
                }
            }
            @if type-of($onn) == 'color' {
                $col: $onn;
            }
        }
        @if $x != false {
            $y: if($y == false, $x, $y);
            $on-col: rgba($col, 0.5);
            @warn $x + ' HELLO ' + unit($x);
            @if $x > zeromeasure(unit($x)) {
                $s: produce-single-construction-grid(unit($x), 90deg, $on-col);
                @if $s != false {
                    $grids: append($grids, $s);
                }
                $sizes: append($sizes, ($x 100%));
            }
            @if $y > zeromeasure(unit($y)) {
                $s: produce-single-construction-grid(unit($y), 0deg, $on-col);
                @if $s != false {
                    $grids: append($grids, $s);
                }
                $sizes: append($sizes, (100% $y));
            }
        } @else {
            @warn "An invalid construction-grids was supplied must have an x dimension, optional y, optional color"; }}

    @if length($grids) > 0 and length($grids) == length ($sizes) {
        @warn "CONSTRUCTION GRID USED::THIS SHOULD NOT BE FOR PRODUCTION";
        body {
            @include __after {
                @include __background-image($grids...);
                z-index: 999999999999;
                position: absolute;
                top: 0;
                left: 0;
                bottom: 0;
                right: 0;
                content: ' ';
                height: 5000px;
                pointer-events: none;
                overflow: hidden;
                background-size: safe-unquote($sizes); 
            }
        }
    } @else {
        @warn "No valid construction-grids were supplied, and no construction-grid created, yet construction-grid included";
    }
}
@function produce-single-construction-grid($unit, $angle, $col) {
    @if is-unit($unit) and is-angle($angle) and type-of($col) == 'color' {
        $l: ();
        $l: append($l, 'repeating-linear-gradient');
        $l: append($l, $angle);
        $l: append($l, $col);
        $t: ();
        $t: append($t, measure(1px,$unit));
        $t: append($t, $col);
        $l: append($l, $t);
        $t: ();
        $t: append($t, measure(1px,$unit));
        $t: append($t, transparent);
        $l: append($l, $t);
        $l: append($l, transparent);
        @return $l;
    } @else {
        @warn "construction-grid was supplied improper values";
        @return false;
    }
}
