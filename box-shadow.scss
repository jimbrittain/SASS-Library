@import "msfilter_shadowglow.scss";
@mixin __box-shadow($a1:a, $a2:a, $a3:a, $a4:a, $a5:a, $a6:a, $a7:a, $a8:a, $a9:a){
  $args: array_create_exclude("a",$a1,$a2,$a3,$a4,$a5,$a6,$a7,$a8,$a9);
  $standards: "standards";
  $prefixed: "prefixed";
  $ie6: "ie6";
  $ie7: "ie7";
  
  $res: false;
  @for $i from 1 through length($args) {
    $b: single-box-shadow1(nth($args, $i));
    @if($b != false){
      @if($res == false){ $res: (); }
      $res: append($res, $b); }}
  @if($res != false and length($res) > 0){
    @for $i from 1 through length($res){
      $on: nth($res, $i);
      @for $n from 1 through length($on){
        $onn: nth($on, $n);
        @if(nth($onn, 1) == "standards"){ $standards: append($standards, nth($onn, 2)); }
        @if(nth($onn, 1) == "prefixed"){ $prefixed: append($prefixed, nth($onn, 2)); }
        @if(nth($onn, 1) == "ie6" and length($onn) > 1){ $ie6: append($ie6, nth($onn, 2)); }
        @if(nth($onn, 1) == "ie7" and length($onn) > 1){ $ie7: append($ie7, nth($onn, 2)); }
  }}} @else if $a1 == 'none' {
    $standards: append($standards, "none");
    $prefixed: append($prefixed, "none");
    $ie6: append($ie6, "none");
    $ie7: append($ie7, "none");
  }
  @if(length($prefixed) > 1) { 
    -webkit-box-shadow: unquote(liststrip_sb($prefixed));
    -moz-box-shadow: unquote(liststrip_sb($prefixed));
  }
  @if(length($standards) > 1) { 
    box-shadow: unquote(liststrip_sb($standards));
  }
  @if(length($ie6) > 1){
    //this could use a done shadow,glow,dropshadow;
    $val: nth($ie6,2);
    filter:unquote($val); 
  }
  @if(length($ie7) > 1){
    //this could use a done shadow,glow,dropshadow;
    $val: nth($ie7,2);
    @if($val == "none"){
      -ms-filter:none;
    } @else {
      -ms-filter:$val;
    }
  }
}
@function single-box-shadow1($a1:false,$a2:false,$a3:false,$a4:false,$a5:false,$a6:false,$a7:false,$a8:false,$a9:false){
  $arg_list: array_create_exclude(false,$a1,$a2,$a3,$a4,$a5,$a6,$a7,$a8,$a9);
  $fallback_args: nth($arg_list, 1);
  $arg_list: if(length($arg_list) == 1 and length($fallback_args) > 1, $fallback_args, $arg_list); 
  
  $standards: "standards";
  $prefixed: "prefixed";
  $ie6: "ie6";
  $ie7: "ie7";
  
  $valid: false;
  $error: false;
  $horiz_offset: 0;
  $vert_offset: 0;
  $blur_radius: 0;
  $spread: 0;
  $color: false;
  $inset: false;
  $isnone: false;
  $color_added: false;
  
  $lengths_added: 1;
  @for $i from 1 through length($arg_list){
    $on: nth($arg_list, $i);
    @if(type-of($on) == 'color'){
      @if($color_added == false){ $color: $on; $color_added: true; } @else { @warn "box-shadow: supplied two colors."; }
    } @else if(type-of($on) == 'string' and ($on == 'inset' or $on == 'none')){
      @if($on == 'inset'){ 
        $inset: true; 
      } @else {
        @if($on != 'none'){
          @warn "box-shadow: supplied a string that is !inset.";
        } @else { 
          $isnone:true; }}
    } @else if(type-of($on) == 'number'){
      @if($lengths_added == 1){
        $horiz_offset: $on;
        $lengths_added: $lengths_added + 1;
      } @else if($lengths_added == 2){
        $vert_offset: $on;
        $lengths_added: $lengths_added + 1;
      } @else if($lengths_added == 3){
        $blur_radius: $on;
        $lengths_added: $lengths_added + 1;
      } @else if($lengths_added == 4){
        $spread: $on;
        $lengths_added: $lengths_added + 1;
      } @else { @warn "box-shadow: supplied too many lengths."; }}}
  @if($color != false){
    $str: return_box-shadow_lengths($horiz_offset, $vert_offset, $blur_radius, $spread);
    $str: $str + $color;
    $str: $str + if($inset == true, " inset", "");
    $standards: append($standards, $str);
    
    $str: "";
    $str: if($inset == true, "inset ", "");
    $str: $str + return_box-shadow_lengths($horiz_offset, $vert_offset, $blur_radius, $spread);
    $str: $str + " " + $color;
    $prefixed: append($prefixed, $str);
    //ie6
    $str: "";
    @if($inset == false){
      $str: msfilter_shadowglow_str($color, $horiz_offset $vert_offset, $blur_radius);
      @if($str != "none"){
        $ie6: append($ie6, $str);
        $ie7: append($ie7, $str);
      }
      //@if($horiz_offset == 0 and $vert_offset == 0){
        //$blur_radius: measure($blur_radius, 'px');
        //$blur_radius: round($blur_radius);
        //$str: "progid:DXImageTransform.Microsoft.Glow(Color=" + $color + ",Strength=" + strip-units($blur_radius) + ')';
        
      //} @else {
        //shadow;
        //$horiz_offset: measure($horiz_offset, 'px');
        //$vert_offset: measure($vert_offset, 'px');
        
      //}
    } @else {
      $ie6: false;
      $ie7: false; }
    $list: array_create_exclude(false, $standards,$prefixed,$ie6,$ie7);
    @return $list;
  } @else {
    @if($isnone == false){ @warn "box-shadow: error, colour not supplied."; }
    @return false; }

}


@function single-box-shadow($a1:false,$a2:false,$a3:false,$a4:false,$a5:false,$a6:false,$a7:false,$a8:false,$a9:false){
  $arg_list: array_create_exclude(false,$a1,$a2,$a3,$a4,$a5,$a6,$a7,$a8,$a9);
  $fallback_args: nth($arg_list, 1);
  $arg_list: if(length($arg_list) == 1 and length($fallback_args) > 1, $fallback_args, $arg_list); 
  
  $standards: "standards";
  $prefixed: "prefixed";
  $ie6: "ie6";
  $ie7: "ie7";
  
  $valid: false;
  $error: false;
  $horiz_offset: 0;
  $vert_offset: 0;
  $blur_radius: 0;
  $spread: 0;
  $color: false;
  $inset: false;
  $isnone: false;
  $color_added: false;
  
  $lengths_added: 1;
  @for $i from 1 through length($arg_list){
    $on: nth($arg_list, $i);
    @if(type-of($on) == 'color'){
      @if($color_added == false){ $color: $on; $color_added: true; } @else { @warn "box-shadow: supplied two colors."; }
    } @else if(type-of($on) == 'string' and ($on == 'inset' or $on == 'none')){
      @if($on == 'inset'){ 
        $inset: true; 
      } @else {
        @if($on != 'none'){
          @warn "box-shadow: supplied a string that is !inset.";
        } @else { 
          $isnone:true; }}
    } @else if(type-of($on) == 'number'){
      @if($lengths_added == 1){
        $horiz_offset: $on;
        $lengths_added: $lengths_added + 1;
      } @else if($lengths_added == 2){
        $vert_offset: $on;
        $lengths_added: $lengths_added + 1;
      } @else if($lengths_added == 3){
        $blur_radius: $on;
        $lengths_added: $lengths_added + 1;
      } @else if($lengths_added == 4){
        $spread: $on;
        $lengths_added: $lengths_added + 1;
      } @else { @warn "box-shadow: supplied too many lengths."; }}}
  @if($color != false){
    $str: return_box-shadow_lengths($horiz_offset, $vert_offset, $blur_radius, $spread);
    $str: $str + $color;
    $str: $str + if($inset == true, " inset", "");
    $standards: append($standards, $str);
    
    $str: "";
    $str: if($inset == true, "inset ", "");
    $str: $str + return_box-shadow_lengths($horiz_offset, $vert_offset, $blur_radius, $spread);
    $str: $str + " " + $color;
    $prefixed: append($prefixed, $str);
    //ie6
    $str: "";
    @if($inset == false){
      $str: msfilter_shadowglow_str($color, $horiz_offset $vert_offset, $blur_radius);
      @if($str != "none"){
        $ie6: append($ie6, $str);
        $ie7: append($ie7, $str);
      }
      //@if($horiz_offset == 0 and $vert_offset == 0){
        //$blur_radius: measure($blur_radius, 'px');
        //$blur_radius: round($blur_radius);
        //$str: "progid:DXImageTransform.Microsoft.Glow(Color=" + $color + ",Strength=" + strip-units($blur_radius) + ')';
        
      //} @else {
        //shadow;
        //$horiz_offset: measure($horiz_offset, 'px');
        //$vert_offset: measure($vert_offset, 'px');
        
      //}
    } @else {
      $ie6: false;
      $ie7: false; }
    $list: array_create_exclude(false, $standards,$prefixed,$ie6,$ie7);
    @return $list;
  } @else {
    @if($isnone == false){ @warn "box-shadow: error, colour not supplied."; }
    @return false; }
}

@function return_box-shadow_lengths($a1:0, $a2:0, $a3:0, $a4:0){
  $might_be: "";
  $a1: if(strip-units($a1) == 0, 0, $a1);
  $str: $a1 + " ";
  @if(strip-units($a2) != 0){
    $str: $str + $a2 + " ";
  } @else { $might_be: "0 "; }
  @if(strip-units($a3) != 0){
    $str: $str + $might_be + $a3 + " ";
    $might_be: "";
  } @else { $might_be: $might_be + "0 "; }
  @if(strip-units($a4) != 0){ $str: $str + $might_be + $a4 + " "; }
  @return $str;
}
