@function is-radial-gradient-position($a1,$a2:$_bi_d,$a3:$_bi_d,$a4:$_bi_d,$a5:$_bi_d,$a6:$_bi_d,$a7:$_bi_d,$a8:$_bi_d,$a9:$_bi_d){
    $args: arguments($a1,$a2,$a3,$a4,$a5,$a6,$a7,$a8,$a9);
    $args: list-change-separator($args, ',');
    $args: list-safe-unquote-items($args);

    @if length($args) == 1 and type-of(nth($args,1)) == 'string' and str-index(nth($args,1), ' ') != null { $args: str-explode(nth($args,1), ' '); }

    $i: 1;
    $valid: true;
    $had-position: false;
    @while $i <= length($args) and $valid == true {
        $on: nth($args,$i);
        @if $i == 1 and is-circular-shape-value($on) {
            //continue;
        } @else if ($i == 1 or $i == 2) and is-extent-value($on) {
            // continue
        } @else if is-position-length-percent-value($on) and not($had-position) {
            $had-postion: true;
            @if length($args) >= ($i + 1) and is-position-length-percent-value(nth($args, ($i + 1))) {
                $i: $i + 1; } //skip next
            //continue
        } @else if type-of($on) == string and $on == 'at' and not($had-position) {
            //next two;
            @if length($args) < ($i + 1) { 
                $valid: false; 
            } @else {
                $inc: 1;
                $pos: ();
                $pos: append($pos, nth($args, $i + 1));
                @if length($args) > ($i + 2) { $valid: false; }
                @if length($args) == ($i + 2) {
                    $inc: 2;
                    $pos: append($pos, nth($args, $i + 2)); }
                @if is-position-length-percent-value($pos) { $i: $i + $inc; }
            }
        } @else {
            $valid: false;
        }
        $i: $i + 1; 
    }
    @return if($valid == true, true, false); }
@function produce-radial-gradient($a1,$a2:$_bi_d,$a3:$_bi_d,$a4:$_bi_d,$a5:$_bi_d,$a6:$_bi_d,$a7:$_bi_d,$a8:$_bi_d,$a9:$_bi_d){
    $arg_list: arguments($a1,$a2,$a3,$a4,$a5,$a6,$a7,$a8,$a9);
    $arg_list: list-change-separator($arg_list, ',');
    $arg_list: list-safe-unquote-items($arg_list);
    $r: (); //return list

    $first: nth($arg_list, 1);

    @if not($first == 'radial-gradient' or $first == 'repeating-radial-gradient') {
        @return false;
    } 
    $type: $first;

    $start_col: false;
    $cols: ();
    $cols: list-change-separator($cols, ',');
    $temp_col: false;
    $last_col: false;
    $dir: false;

    $i: 2;
    @while $i <= length($arg_list) {
        $on: nth($arg_list, $i);
        @if type-of($on) == 'list' {
            @if (is-radial-gradient-position($on) and $dir == false) {
                $dir: $on;
            } @else {
                @if ($temp_col != false) {
                    $cols: append($cols, $temp_col); 
                    $temp_col: false; }

                $first-pot: if(length($on) > 0, nth($on,1), false);
                @if $first-pot != false {
                     @if type-of($first-pot) == 'color' and length($on) < 3 {
                        @if $start-col != false {
                            $last-col: $first-pot;
                        } @else {
                            $start-col: $first-pot; }
                        @if length($on) == 1 or (is-percent(nth($on,2)) or is-length(nth($on,2))) {
                            $cols: append($cols, $on); }
                    } @else if is-percent($first-pot) or is-length($first-pot) and length($on) < 3 {
                        @if length($on) == 1 or (type-of(nth($on,2)) == 'color') {
                            @if length($on) == 2 { $last_col: nth($on,2); }
                            $cols: append($cols, $on); }}}}
        } @else if type-of($on) == 'color' {
            @if $start_col == false {
                $start_col: $on;
            } 
            @if $temp_col != false {
                $l: ();
                $l: append($l, $temp_col);
                $cols: append($cols, $l);
                $temp_col: $on;
                $last_col: $on;
            } @else {
                $temp_col: $on;
                $last_col: $on; }
        } @else if is-percent($on) or is-length($on) {
            @if $temp_col == false {
                $temp_col: $on;
            } @else {
                @if type-of($temp_col) == color {
                    $cols: append($cols, ($temp_col $on));
                    $temp_col: false;
                } @else {
                    $l: ();
                    $l: append($l, $temp_col);
                    $cols: append($cols, $l);
                    $temp_col: false;
                }
            }
        } @else if type-of($on) == string and $dir == false {
            $var_valid: true;
            $vars: '';
            $p: $i;
            $inc: 0;
            @while $p <= length($arg_list) and $var_valid == true {
                $non: nth($arg_list, $p);
                @if type-of($non) == 'string' or is-position-length-percent-value($non) or is-extent-value($non) {
                    @if $vars != '' {
                        $vars: append($vars, $non);
                    } @else { $vars: $non; }
                    @if is-radial-gradient-position($vars) or ($non == 'at') {
                        $dir: $vars;
                        $inc: $p;
                    } @else { $var_valid: false; }
                } @else { $var_valid: false; }
                $p: $p + 1; }
            @if $inc > 0 { $i: $inc; }
        }
        $i: $i + 1; }

    @if $temp_col != false {
        $l: ();
        $l: append($l, $temp_col);
        $cols: join($cols, $l); }

    @if $start_col == false or $last_col == false {
        @return false;
    } @else {

        //$str: $type + '(';
        //$rd_str: $str;
        //standards version
        $str: $type + '(';
        @if $dir != false {
            $str: $str + $dir + ', ';
        }
        $str: $str + $cols + ')';

        $standards: new-key-value('standards', $str);
        $webkit: new-key-value('webkit', '-webkit-' + $str);
        $ms: new-key-value('ms', '-ms-' + $str);
        $o: new-key-value('o', '-o-' + $str);
        $moz: new-key-value('moz', '-moz-' + $str);
        $r: list-create($moz, $ms, $o, $webkit, $standards);

        //WEBKIT OLD;
        @if $type == 'radial-gradient' {
            $str: '-webkit-gradient(radial, ';
            $str: $str + $dir + ', ';
            $str: $str + '100% 100%, '; //scaling default to 100 to equate with standards;
            @for $i from 1 through length($cols) {
                $on: nth($cols, $i);
                @if $i == 1 {
                    $str: $str + 'from ' + $start_col + ', ';
                    @if not(type-of($on) == color or (type-of($on) == list and length($on) == 1 and type-of(nth($on,1)) == color)) {
                        $str: $str + 'color-stop(' + $on + '), ';
                    }
                } @else if $i == length($cols) {
                    @if not(length($on) == 1 and type-of($on) == color) {
                        $str: $str + 'color-stop(' + $on + '), '; }
                    $str: $str + 'to ' + $last_col; 
                } @else {
                    $str: $str + 'color-stop(' + $on + '), '; }}
            $str: $str + ')';
            $webkit_old: new-key-value('webkit_old', $str);
            @warn nth($webkit_old,2);
            $r: list-unshift($r, $webkit_old);
        }
        //IE old
    }
    @return if(length($r) > 0, $r, false); }

