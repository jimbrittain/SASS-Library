$_bi_d: "a";

@function calculateXYFromDistanceAngle($distance, $angle, $degrees:true){
  @if not(unitless($angle)) and unit($angle) == 'deg' {
    $angle: strip-units($angle);
    $degrees: true;
  } @else {
    $angle: radiansToDegrees($angle) + zeromeasure('deg');
    $degrees: false; }
  $int_rads: if(degrees, degreesToRadians($angle), $angle);
  $int_degs: if(degrees, $angle, radiansToDegrees($angle));
  @if($distance < 0){
    $distance: abs($distance);
    $int_degs: 180 + $int_degs;
    $int_degs: rationalAngle($int_degs);
    $int_rads: degreesToRadians($int_degs);
    $distance: abs($distance); }
  $x: cos($int_rads) * $distance;
  $y: sin($int_rads) * $distance;
  @if(type-of($x) != 'number' or type-of($y) != 'number'){
    @warn "calculateXYFromAngleDistance resulted in a none number"; }
  @return ($x, $y); }

@function calculateDistanceAngleFromXY($x, $y){
  $int_x: strip-units($x);
  $int_y: strip-units($y);
  $distance: sqrt((pow($int_x,2) + pow($int_y,2)));
  $angle: acos((abs($int_x)/$distance));
  $angle: radiansToDegrees($angle);
  @if($x >= 0 and $y >= 0){
    $angle: 0 + $angle;
  } @elseif($x >= 0){
    $angle: 360 - $angle;
  } @elseif($y >= 0){
    $angle: 180 - $angle;
  } @else { $angle: 180 + $angle; }
  @if type-of($distance) != 'number' { @warn "calculateAngleDistanceFromXY has resulted in an invalid distance."; }
  $distance: if(unitless($x), $distance, zeromeasure(unit($x)) + $distance);
  @if unit($x) != unit($distance){ @warn "fuck up on same measure"; }
  $angle: zeromeasure('deg') + $angle;
  @return ($distance, $angle); }

@mixin text-extrude($a1:$_bi_d,$a2:$_bi_d,$a3:$_bi_d,$a4:$_bi_d,$a5:$_bi_d,$a6:$_bi_d,$a7:$_bi_d,$a8:$_bi_d,$a9:$_bi_d) {
  $arg_list: array_create_exclude($_bi_d, $a1,$a2,$a3,$a4,$a5,$a6,$a7,$a8,$a9);
  
  $angle: false;
  $distance: false;
  $x: false;
  $y: false;
  $colors: ();
  $color1: false;
  $color2: false;
  
  $int_degs: false;
  $int_rads: false;
  $int_x: false;
  $int_y: false;
  
  $valid: false;
  $bfs: $base-font-size;
  $error: false;
  
  /*process the arguments*/
  @for $i from 1 through length($arg_list) {
    $on: nth($arg_list, $i);
    @if(type-of($on) == 'color'){
      $colors: append($colors, $on);
    } @elseif(type-of($on) == 'number'){
      @if(unitless($on)){
        @if($angle == false){
          $angle: $on;
        } @else { $distance: $on + zeromeasure('px'); }
      } @else {
        @if(unit($on) == 'deg'){
          $angle: $on;
        } @else {
          $distance: if($distance == false, $on, $distance);
         @if($angle == false or $distance == false){
            @if($x == false){ 
              $x: $on;
            } @elseif ($y == false) {
              $y: $on; }
          } @else { 
            @debug "Here";
            $bfs: $on; }}}}}
  @if(($x != false and $y != false) or ($angle != false and $distance != false)){
    @if($x != false and $y != false){
      $r: calculateDistanceAngleFromXY($x,$y);
      $distance: nth($r,1);
      $angle: nth($r,2);
    } @else {
      $r: calculateXYFromDistanceAngle($distance,$angle);
      $x: nth($r,1);
      $y: nth($r,2); }
    $step-size: measure(0.5px, if(unitless($distance), 'px', unit($distance)), $bfs);
    $full-steps: floor($distance/$step-size);
    $arr: ();
    @for $i from 1 through $full-steps {
      $this_color: black;
      
      @if(length($colors) > 1){
        $len: length($colors) - 1;
        $colstep: floor(($full-steps - 1)/$len);
        $onstep: ceil($i/$colstep);
        $onmix: ((($i - 1) % $colstep)/$colstep) * 100;
        $onmix: 0% + $onmix;
        @if($onstep >= length($colors)){
          $this_color: nth($colors, length($colors));
        } @else {
          $this_color: mix(nth($colors,$onstep + 1), nth($colors,$onstep), $onmix); }
      } @elseif (length($colors) == 1) {
          $this_color: nth($colors,1);
      } @else { $this_color: black; }
      
      $this_distance: $distance * ($i/$full-steps);
      $r: calculateXYFromDistanceAngle($this_distance, $angle);
      $this_x: measure(nth($r,1), unit($x), $bfs);
      $this_y: measure(nth($r,2), unit($y), $bfs);
      $arr: append($arr, ($this_x, $this_y, 0, $this_color)); }
    @if(length($arr) > 0){
      $s: "";
      @for $i from 1 through length($arr){
        $on: nth($arr,$i);
        $ns: nth($on,1) + ' ' + nth($on,2) + ' ' + nth($on,3) + ' ' + nth($on,4);
        $ns: if($i > 1, ", " + $ns, $ns);
        $s: $s + $ns; }
      text-shadow: unquote($s); }
  } @else {
    @warn "Text Extrude has not been supplied the correct variables."; }}