@import "math.scss";
@import "array.scss";
@import "measure.scss"; //measure conversion;
@import "float_columns.scss"; //float column mixin;
@import "responsive.scss"; //responsive generator;
@import "complex_layout.scss";
@import "font_feature_settings.scss";
@import "meyer_reset.scss";

@import "background-image.scss";
@import "box-shadow.scss";

@mixin ie6_htmlstar_hack { * html & { @content; }}
@mixin ie7_htmlstar_hack { *+html & { @content; }}
@mixin ie8_htmlstar_hack { *:first-child+html & { @content; }}

@mixin textSizeAdjusts($per:100%){
 -webkit-text-size-adjust: $per;
 -moz-text-size-adjust: $per;
 -ms-text-size-adjust: $per; }

@mixin prettyimage { 
  -ms-interpolation-mode: bicubic; 
  //image-rendering: optimizeQuality; //newer versions of Firefox incorrectly treat this as bilinear rather than auto
  image-rendering: auto; //added because of bug in Firefox 28
}
@mixin prettytext { text-rendering: optimizeLegibility; }

//Prefix Targeting, __ then the full prefixless syntax;
@mixin __overflow-x($val:auto){
  overflow-x: $val;
  -ms-overflow-x: $val; } //as of 201402 -ms prefix only prefix in use
@mixin __overflow-y($val:auto){
  overflow-y: $val;
  -ms-overflow-y: $val; } //as of 2014-2 -ms prefix only prefix in use
@mixin __text-align-last($val:auto){
  text-align-last: $val;
  -moz-text-align-last: $val; } //as of 201402 -moz prefix only prefix in use
@mixin __border-radius($val: 0){
  -webkit-border-radius: $val;
  -moz-border-radius: $val; 
  border-radius: $val; }
@mixin __border-top-left-radius($val: 0){
  border-top-left-radius: $val;
  -webkit-border-top-left-radius: $val;
  -moz-border-top-left-radius: $val; }
@mixin __border-top-right-radius($val: 0){
  border-top-right-radius: $val;
  -webkit-border-top-right-radius: $val;
  -moz-border-top-right-radius: $val; }
@mixin __border-bottom-left-radius($val:0){
  border-bottom-left-radius: $val;
  -webkit-border-bottom-left-radius: $val;
  -moz-border-bottom-left-radius: $val; }
@mixin __border-bottom-right-radius($val:0){
  border-bottom-right-radius: $val;
  -webkit-border-bottom-right-radius: $val;
  -moz-border-bottom-right-radius: $val; }
@mixin __transition-delay($val: 0ms){
  transition-delay: $val;
  -webkit-transition-delay: $val;
  -moz-transition-delay: $val;
  -o-transition-delay: $val; }
@mixin __transition-duration($val: inherit){
  transition-duration: $val;
  -webkit-transition-duration: $val;
  -moz-transition-duration: $val;
  -o-transition-duration: $val; }
@mixin __transition-property($a1: all,$a2:"a",$a3:"a",$a4:"a",$a5:"a",$a6:"a",$a7:"a",$a8:"a",$a9:"a",$a10:"a"){
  $arg_list: array_create_exclude("a", $a1,$a2,$a3,$a4,$a5,$a6,$a7,$a8,$a9,$a10);
  $fallback_args: nth($arg_list, 1);
  $arg_list: if(length($arg_list) == 1 and length($fallback_args) > 1, $fallback_args, $arg_list);
  $val: nth($arg_list, 1);
  @if length($arg_list) > 1 {
    @for $i from 2 through length($arg_list) {
      $val: $val + ', ' + nth($arg_list, $i);
    }}
  $val: unquote($val);
  
  transition-property: $val;
  -webkit-transition-property: $val;
  -moz-transition-property: $val;
  -o-transition-property: $val; }
@mixin __transition-timing-function($val:ease){
  transition-timing-function: $val;
  -webkit-transition-timing-function: $val;
  -moz-transition-timing-function: $val;
  -o-transition-timing-function: $val; }
@mixin __transition($a1:"a",$a2:"a",$a3:"a",$a4:"a",$a5:"a",$a6:"a",$a7:"a",$a8:"a",$a9:"a",$a10:"a"){
  $arg_list: array_create_exclude("a", $a1,$a2,$a3,$a4,$a5,$a6,$a7,$a8,$a9,$a10);
  $fallback_args: nth($arg_list, 1);
  $arg_list: if(length($arg_list) == 1 and length($fallback_args) > 1, $fallback_args, $arg_list); 
  
  $str: nth($arg_list,1);
  @for $i from 2 through length($arg_list){
    $str: $str + ',' + nth($arg_list, $i);
  }
  $str: unquote($str);
  
  -webkit-transition: $str;
  -moz-transition: $str;
  -o-transition: $str;
  -ms-transition: $str;
  transition: $str;
}
@mixin __text-align-last($val:left){
  -moz-text-align-last: $val;
  text-align-last: $val; }
@mixin __text-justify {
  text-align: justify;
  -ms-text-justify: newspaper; }

@mixin __column-gap($val:inherit) {
  -moz-column-gap: $val;
  -webkit-column-gap: $val;
  column-gap: $val; }
@mixin __column-width($val:inherit){
  -moz-column-width: $val;
  -webkit-column-width: $val;
  column-width: $val; }
@mixin __column-fill($val:auto){
  @if($val == 'auto' or $val == 'balance' or $val == 'inherit'){
    -moz-column-fill: $val;
    column-fill: $val;
  } @else { @warn "column-fill supplied with an unrecognized value."; }}
@mixin __column-rule($val){
  //needs a parser on it;
  -moz-column-rule: $val;
  -webkit-column-rule: $val;
  column-rule: $val;
}
@mixin __columns($val){
  //needs a parser on it;
  -moz-columns: $val;
  -webkit-columns: $val;
  columns: $val; }
@mixin __column-rule-width($val:medium){
  -moz-column-rule-width: $val;
  -webkit-column-rule-width: $val;
  column-rule-width: $val; }
@mixin __column-rule-color($val){
  @if(type-of($val) == 'color'){
    -moz-column-rule-color: $val;
    -webkit-column-rule-color: $val;
    column-rule-color: $val;
  } @else { @warn "column-rule-color not supplied with a color."; }}
@mixin __column-rule-style($val:none){
  -moz-column-rule-style: $val;
  -webkit-column-rule-style: $val;
  column-rule-style: $val; }
@mixin __column-span($val:none){
  @if($val == 'none' or $val == 'all' or $val == 'inherit'){
    -moz-column-span: $val;
    -webkit-column-span: $val;
    column-span: $val;
  } @else { @warn "column-span supplied with an unrecognized value."; }}
@mixin __column-count($val:auto){
  @if(type-of($val) == 'number' or $val == 'auto'){
    -moz-column-count: $val;
    -webkit-column-count: $val;
    column-count: $val;
  } @else { @warn "column-count supplied with an unrecognized value."; }}

@mixin __break-inside($val:auto){
  -webkit-column-break-inside: $val;
  -moz-break-inside: $val;
  -webkit-break-inside: $val;
  break-inside: $val; }

@mixin __animation-name($val:none){
  -o-animation-name: $val;
  -moz-animation-name: $val;
  -webkit-animation-name: $val;
  animation-name: $val; }
@mixin __animation-duration($val:0s){
  -o-animation-duration: $val;
  -moz-animation-duration: $val;
  -webkit-animation-duration: $val;
  animation-duration: $val; }
@mixin __animation-iteration-count($val:1){
  -o-animation-iteration-count: $val;
  -moz-animation-iteration-count: $val;
  -webkit-animation-iteration-count: $val;
  animation-iteration-count: $val; }
@mixin __animation-timing-function($val:ease){
  -o-animation-timing-function: $val;
  -moz-animation-timing-function: $val;
  -webkit-animation-timing-function: $val;
  animation-timing-function: $val; }
@mixin __animation-fill-mode($val:none){
  -o-animation-fill-mode: $val;
  -moz-animation-fill-mode: $val;
  -webkit-animation-fill-mode: $val;
  animation-fill-mode: $val; }

@mixin __keyframes($name:false){
  @if($name != false){
    @-o-keyframes #{$name} { @content; }
    @-moz-keyframes #{$name} { @content; }
    @-webkit-keyframes #{$name} { @content; }
    @keyframes #{$name} { @content; }
  }
}

@mixin __opacity($val:1){
  -moz-opacity: $val;
  -khtml-opacity: $val;
  opacity: $val;
  //needs MSFILTER HERE; 
}
@mixin __cursor($val:auto){
  @if($val == "grab" or $val == "grabbing" or $val == 'zoom-in' or $val == 'zoom-out'){
    @if($val == 'grab' or $val == 'grabbing'){ cursor: move; }
    cursor: -moz-#{$val};
    cursor: -webkit-#{$val};
    cursor: #{$val};
  } @elseif($val == "hand" or $val == "pointer"){
    cursor: hand;
    cursor: pointer;
  } @else {
    cursor: $val;
  }
}
@mixin __ns_appearance($val:none){
  -webkit-appearance: $val;
  -moz-appearance: $val; }

@mixin force_input_textbox {
  -webkit-appearance: textfield;
  -moz-appearance: textfield;
  //-o-appearance: textfield;
  //appearance: field;
  -webkit-box-sizing: content-box;
  -moz-box-sizing: content-box;
  //-o-box-sizing: content-box;
  box-sizing: content-box; }
@mixin float_fix {
  min-height: 1%;
  overflow: hidden; }
@mixin after_float_fix {
  &:after {
    content: ".";
    display: block;
    height: 0;
    clear: both;
    visibility: hidden;
    overflow: hidden;
    font-size: 0;
    line-height: 0;
    padding: 0;
    margin: 0; }}
@mixin placeholder_definitions { &::placeholder, &::-webkit-input-placeholder, &:-moz-placeholder, &:placeholder { @content; }}
@mixin searchdecoration_definitions { &::-webkit-search-decoration, &::-webkit-search-results-decoration { @content; }}
@mixin __before { &::before { @content; } &:before { @content; }}
@mixin __after { &::after { @content; } &:before { @content; }}
//to do: nice padding function. background-image: linear-gradient function, text-shadow function, border-radius function;
