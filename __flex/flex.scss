$_bi_d: -1 !default;

@mixin __flex-basis($val) {
    @if is-flex-basis-value($val) or is-length($val) or is-percent($val) or is-reserved-variable($val) {
        -ms-flex-preferred-size: safe-unquote($val);
        -webkit-flex-basis: safe-unquote($val);
        flex-basis: safe-unquote($val);
    } @else {
        @warn '`__flex-basis` has been supplied an invalid value'; }}

@function is-flex-basis-value($val) {
    $list: (fill max-content min-content fit-content content auto);
    @return if(index($list, $val) != null, true, false); }

@mixin __flex-direction($val) {
    @if is-flex-direction-value($val) or is-reserved-variable($val) {
        -moz-flex-direction: safe-unquote($val);
        -ms-flex-direction: safe-unquote($val);
        -webkit-flex-direction: safe-unquote($val);
        flex-direction: safe-unquote($val);
    } @else {
        @warn '`__flex-direction` has been supplied an invalid value';
    }
}
@function is-flex-direction-value($val) {
    $list: (row row-reverse column column-reverse);
    @return if(index($list, $val) != null, true, false); }

@mixin __flex-wrap($val) {
    @if is-flex-wrap-value($val) or is-reserved-variable($val) {
        -ms-flex-wrap: safe-unquote($val);
        -webkit-flex-wrap: safe-unquote($val);
        flex-wrap: safe-unquote($val);
    } @else {
        @warn '`flex-wrap` has been supplied an invalid value';
    }
}
@function is-flex-wrap-value($val) {
    $list: (nowrap wrap wrap-reverse);
    @return if(index($list, $val) != null, true, false); }

@mixin __flex-grow($val) {
    @if (type-of($val) == 'number' and unitless($val) and $val >= 0) or is-reserved-variable($val) {
        -ms-flex-positive: safe-unquote($val);
        -webkit-flex-grow: safe-unquote($val);
        flex-grow: safe-unquote($val);
    } @else {
        @warn '`__flex-grow` has been supplied an invalid value';
    }
}
@mixin __flex-shrink($val) {
    @if (type-of($val) == 'number' and unitless($val) and $val >= 0) or is-reserved-variable($val) {
        -ms-flex-negative: safe-unquote($val);
        -webkit-flex-shrink: safe-unquote($val);
        flex-shrink: safe-unquote($val);
    } @else {
        @warn '`__flex-shrink` has been supplied an invalid value';
    }
}
@mixin __flex-flow($a1, $a2:$_bi_d) {
    $args: arguments($a1,$a2);
    $args: list-change-separator($args, ' ');
    $args: list-safe-unquote-items($args);
    @if length($args) > 0 and length($args) < 3 {
        @if length($args) == 1 {
            $on: nth($args,1);
            @if is-reserved-variable($on) or is-flex-direction-value($on) or is-flex-wrap-value($on) {
                -webkit-flex-flow: $on;
                flex-flow: $on;
            } @else {
                @warn '`flex-flow` supplied invalid value for single argument'; }
        } @else if length($args) == 2 {
            @if (is-flex-direction-value(nth($args,1)) and is-flex-wrap-value(nth($args,2))) or (is-flex-direction-value(nth($args,2)) and is-flex-wrap-value(nth($args,1))) {
                -webkit-flex-flow: $args;
                flex-flow: $args;
            } @else {
                @warn '`flex-flow` supplied invalid values for two arguments; must be a flex-wrap and a flex-direction value'; }}
    } @else { @warn '`flex-flow` supplied invalid arguments'; }}

@mixin __flex($a1,$a2:$_bi_d,$a3:$_bi_d) {
    $args: arguments($a1,$a2,$a3);
    $args: list-change-separator($args, ' ');
    $args: list-safe-unquote-items($args);
    @if length($args) > 0 and length($args) < 4 {
        $good: false;
        @if length($args) == 1 {
            $on: nth($args,1);
            @if is-reserved-variable($on) or $on == 'none' or $on == 'auto' or (type-of($on) == number and $on >= 0 and unitless($on)) or is-length($on) or is-percent($on) or is-flex-basis-value($on) {
                $good: true;
            } @else {
                @warn '`__flex` supplied an invalid single argument; should be reserved, unitless positive number, none or auto'; }
        } @else if length($args) == 2 {
            $n1: nth($args,1);
            $n2: nth($args,2);
            @if (type-of($n1) == number and $n1 >= 0 and unitless($n1)) and ((type-of($n2) == number and $n2 >= 0 and unitless($n2)) or (is-length($n2) or is-flex-basis-value($n2))) {
                $good: true;
            } @else {
                @warn '`__flex` supplied invalid values for two argument; should be positive unitless number, and a length or valid flex-basis value'; }
        } @else if length($args) == 3 {
            $n1: nth($args,1);
            $n2: nth($args,2);
            $n3: nth($args,3);
            @if (type-of($n1) == number and $n1 >= 0 and unitless($n1)) and(type-of($n2) == number and $n2 >= 0 and unitless($n2)) and (is-length($n3) or is-flex-basis-value($n3) or is-percent($n3)) {
                $good: true;
            } @else {
                @warn '`__flex` supplied invalid values for three argument; first two should be positive unitless numbers, and then a length or valid flex-basis value'; }}
        @if $good == true {
            -ms-flex: $args;
            -webkit-flex: $args;
            flex: $args;
        }
    } @else { @warn 'Invalid values supplied for `__flex`'; }
}

